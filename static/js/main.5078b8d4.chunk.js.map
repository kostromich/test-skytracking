{"version":3,"sources":["modules/global/reducer.ts","modules/global/types.ts","modules/global/actions.ts","modules/global/selectors.ts","modules/global/thunks.ts","modules/global/index.ts","modules/index.ts","ownHistory.ts","hooks/useSelector.ts","components/photosList/LazyImage.tsx","components/photosList/PhotoListItem.tsx","components/photosList/PhotosList.tsx","components/modal/ModalOverlay.tsx","components/modal/ModalContent.tsx","components/modal/Modal.tsx","pages/home/HomePage.tsx","app/InnerApp.tsx","app/ConnectedApp.tsx","app/App.tsx","app/createStore.ts","serviceWorker.ts","index.tsx"],"names":["initialState","isInitialized","photos","activePhoto","undefined","globalReducer","createReducer","state","action","payload","setIsInitialized","createAction","setPhotos","setActivePhoto","getIsInitialized","global","getActivePhoto","loadPhotos","dispatch","a","async","fetch","response","json","indexById","indexBy","prop","indexedPhotos","actions","closeModal","push","viewNextPhoto","step","getState","id","nextId","reducer","createRootReducer","combineReducers","history","createHistory","useSelector","useReduxSelector","Image","styled","img","LazyImage","photo","useState","imageSrc","setImageSrc","imageRef","setImageRef","useEffect","observer","didCancel","thumbnailUrl","IntersectionObserver","entries","forEach","entry","intersectionRatio","isIntersecting","unobserve","threshold","rootMargin","observe","ref","src","alt","title","onLoad","event","target","classList","add","onError","Component","div","props","active","StyledLazyImage","PhotoListItem","useHistory","onClick","e","preventDefault","PhotosList","to","from","size","Object","values","maxPageSize","length","slice","getPhotos","map","key","ModalOverlay","useDispatch","Picture","picture","ModalContent","srcSet","url","Modal","useEventListener","HomePage","photoId","useParams","getPhoto","InnerApp","path","component","ConnectedApp","App","store","setStore","createStore","applyMiddleware","thunkMiddleware","routerMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","error"],"mappings":"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","file":"static/js/main.5078b8d4.chunk.js","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { StateGlobalSection } from 'types'\nimport * as types from './types'\n\nconst initialState: StateGlobalSection = {\n  isInitialized: false,\n  photos: {},\n  activePhoto: undefined\n}\n\nconst globalReducer = createReducer(initialState, {\n  [types.SET_IS_INITIALIZED]: (state, action) => {\n    state.isInitialized = action.payload\n  },\n  [types.SET_PHOTOS]: (state, action) => {\n    state.photos = action.payload\n  },\n  [types.SET_ACTIVE_PHOTO]: (state, action) => {\n    state.activePhoto = action.payload\n  }\n})\n\nexport default globalReducer\n","export const SET_IS_INITIALIZED = 'global/SET_IS_INITIALIZED'\nexport const SET_PHOTOS = 'global/SET_PHOTOS'\nexport const SET_ACTIVE_PHOTO = 'global/SET_ACTIVE_PHOTO'\n","import { createAction } from '@reduxjs/toolkit'\nimport * as types from './types'\nimport { Photo } from 'types'\n\nexport const setIsInitialized = createAction<boolean>(types.SET_IS_INITIALIZED)\nexport const setPhotos = createAction<Photo[]>(types.SET_PHOTOS)\nexport const setActivePhoto = createAction<Photo | undefined>(types.SET_ACTIVE_PHOTO)\nexport const clearActivePhoto = setActivePhoto(undefined)\n","import { Photo, State } from 'types'\n\nexport const getIsInitialized = (state: State): boolean =>\n  state.global.isInitialized\n\nconst DEFAULT_PAGE_SIZE = 10\n\nexport const getPhotos = (from: number = 0, size: number = DEFAULT_PAGE_SIZE, state: State): Photo[] => {\n  const photos = Object.values<Photo>(state.global.photos)\n\n  if (from < 0) {\n    from = 0\n  }\n\n  let to\n  if (!size) {\n    to = photos.length - from - DEFAULT_PAGE_SIZE\n  } else {\n    const maxPageSize = photos.length - from\n\n    if (size > maxPageSize) {\n      size = maxPageSize\n    }\n\n    to = from + size\n  }\n\n  return photos.slice(from, to)\n}\n\nexport const getPhoto = (photoId: number, state: State): Photo | undefined =>\n  state.global.photos[photoId]\n\nexport const getActivePhoto = (state: State): Photo | undefined =>\n  state.global.activePhoto\n","import { push } from 'connected-react-router'\nimport * as actions from './actions'\nimport indexBy from 'ramda/es/indexBy'\nimport prop from 'ramda/es/prop'\nimport { State } from 'types'\nimport { getActivePhoto } from './selectors'\n\nexport const initApplication = () => async dispatch => {\n  await dispatch(loadPhotos())\n  dispatch(actions.setIsInitialized(true))\n}\n\nconst loadPhotos = () => async dispatch => {\n  const PHOTOS_URL = 'https://jsonplaceholder.typicode.com/photos'\n\n  const response = await fetch(PHOTOS_URL)\n\n  const photos = await response.json()\n\n  const indexById = indexBy(prop('id'))\n\n  const indexedPhotos = indexById(photos)\n\n  dispatch(actions.setPhotos(indexedPhotos))\n}\n\nexport const closeModal = () => async dispatch => dispatch(push('/'))\n\nexport const viewNextPhoto = (step: number) => async (dispatch, getState: () => State) => {\n  const state = getState()\n\n  const activePhoto = getActivePhoto(state)\n\n  if (!activePhoto) {\n    return\n  }\n\n  const { id } = activePhoto\n\n  const nextId = id + step\n\n  const photos = state.global.photos\n\n  if (!(nextId in photos)) {\n    return\n  }\n\n  dispatch(push(`/${nextId}`))\n}\n","import reducer from './reducer'\n\nexport * from './actions'\nexport * from './thunks'\n\nexport default reducer\n","import { combineReducers } from 'redux'\nimport global from './global'\n\nconst createRootReducer = () => combineReducers({\n  global\n})\n\nexport default createRootReducer\n","import { createHashHistory as createHistory } from 'history'\n\nconst history = createHistory()\n\nexport default history\n","import {\n  useSelector as useReduxSelector,\n  TypedUseSelectorHook\n} from 'react-redux'\nimport { State } from 'types'\n\nconst useSelector: TypedUseSelectorHook<State> = useReduxSelector\n\nexport default useSelector\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Photo } from 'types'\n\nconst placeHolder = 'https://via.placeholder.com/150'\n\nconst Image = styled.img`\n  display: block;\n  height: 150px;\n  width: 150px;\n  @keyframes loaded {\n    0% {\n      opacity: 0.1;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  &.loaded:not(.has-error) {\n    animation: loaded 300ms ease-in-out;\n  }\n\n  &.has-error {\n    content: url(${placeHolder});\n  }\n`\n\ninterface OwnProps {\n  photo: Photo\n}\n\nconst LazyImage: React.FC<OwnProps> = ({ photo }) => {\n  const [imageSrc, setImageSrc] = useState(placeHolder)\n  const [imageRef, setImageRef] = useState()\n\n  const onLoad = event => {\n    event.target.classList.add('loaded')\n  }\n\n  const onError = event => {\n    event.target.classList.add('has-error')\n  }\n\n  useEffect(() => {\n    let observer\n    let didCancel = false\n\n    if (imageRef && imageSrc !== photo.thumbnailUrl) {\n      if (IntersectionObserver) {\n        observer = new IntersectionObserver(\n          entries => {\n            entries.forEach(entry => {\n              if (\n                !didCancel &&\n                (entry.intersectionRatio > 0 || entry.isIntersecting)\n              ) {\n                setImageSrc(photo.thumbnailUrl)\n                observer.unobserve(imageRef)\n              }\n            })\n          },\n          {\n            threshold: 0.01,\n            rootMargin: '75%'\n          }\n        )\n        observer.observe(imageRef)\n      } else {\n        // Old browsers fallback\n        setImageSrc(photo.thumbnailUrl)\n      }\n    }\n    return () => {\n      didCancel = true\n      if (observer && observer.unobserve && imageRef) {\n        observer.unobserve(imageRef)\n      }\n    }\n  }, [ photo.thumbnailUrl, imageSrc, imageRef ])\n\n  return (\n    <Image\n      ref={setImageRef}\n      src={imageSrc}\n      alt={photo.title}\n      onLoad={onLoad}\n      onError={onError}\n    />\n  )\n}\n\nexport default LazyImage\n","import React, { MouseEvent } from 'react'\nimport styled from 'styled-components'\nimport { useHistory } from 'react-router-dom'\nimport LazyImage from './LazyImage'\nimport { Photo } from 'types'\n\nconst Component = styled.div`\n  flex: none;\n  display: flex;\n  justify-content: center;\n  margin: 5px;\n  width: 150px;\n  height: 150px;\n  border: 2px solid ${props => props.active ? '#000' : '#ccc'};\n\n  &:hover {\n    cursor: pointer;\n    border-color: #000;\n  }\n`\n\nconst StyledLazyImage = styled(LazyImage)`\n  width: 150px;\n  height: 100%;\n`\n\ninterface OwnProps {\n  photo: Photo\n  active?: boolean\n}\n\nconst PhotoListItem: React.FC<OwnProps> = ({\n  photo,\n  active = false\n}) => {\n  const history = useHistory()\n\n  const handleClick = (e: MouseEvent<HTMLDivElement>) => {\n    e.preventDefault()\n    history.push(`/${photo.id}`)\n  }\n\n  return (\n    <Component onClick={handleClick} active={active}>\n      <StyledLazyImage photo={photo} />\n    </Component>\n  )\n}\n\nexport default PhotoListItem\n","import React from 'react'\nimport styled from 'styled-components'\nimport useSelector from 'hooks/useSelector'\nimport PhotoListItem from './PhotoListItem'\nimport { getActivePhoto, getPhotos } from 'selectors'\n\nconst Component = styled.div`\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n`\n\nconst PAGE_SIZE = 2000\n\nconst PhotosList: React.FC = () => {\n  const photos = useSelector(state => getPhotos(0, PAGE_SIZE, state))\n  const activePhoto = useSelector(getActivePhoto)\n\n  return (\n    <Component>\n      {photos.map(photo => (\n        <PhotoListItem\n          photo={photo}\n          key={photo.id}\n          active={activePhoto && photo.id === activePhoto.id}\n        />\n      ))}\n    </Component>\n  )\n}\n\nexport default PhotosList\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport { closeModal } from '../../modules/global'\n\nconst Component = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1001;\n  height: 100%;\n  width: 100%;\n  background: #000;\n  opacity: 0.5\n`\n\nconst ModalOverlay: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const handleClick = () => {\n    dispatch(closeModal())\n  }\n\n  return (\n    <Component onClick={handleClick}/>\n  )\n}\n\nexport default ModalOverlay\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Photo } from 'types'\n\nconst Component = styled.div`\n  flex: none;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  max-width: 600px;\n  max-height: 600px;\n`\n\nconst Picture = styled.picture``\n\ninterface OwnProps {\n  photo?: Photo\n}\n\nconst ModalContent: React.FC<OwnProps> = ({ photo }) => {\n  return (\n    <Component>\n      {photo\n        ? <Picture>\n            <source srcSet={photo.url}/>\n            <img src={photo.url} alt={photo.title}/>\n          </Picture>\n        : 'Not found'\n      }\n    </Component>\n  )\n}\n\nexport default ModalContent\n","import React, { KeyboardEvent } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport useEventListener from '@use-it/event-listener'\nimport useSelector from 'hooks/useSelector'\nimport { closeModal, viewNextPhoto } from '../../modules/global'\nimport ModalOverlay from './ModalOverlay'\nimport ModalContent from './ModalContent'\nimport { getActivePhoto } from 'selectors'\n\nconst Component = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n  height: 100%;\n  width: 100%;\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Modal: React.FC = () => {\n  const dispatch = useDispatch()\n\n  useEventListener<KeyboardEvent>('keydown', (e) => {\n    if (e.key === 'Escape') {\n      dispatch(closeModal())\n      return\n    }\n\n    if (e.key === 'ArrowRight') {\n      dispatch(viewNextPhoto(1))\n      return\n    }\n\n    if (e.key === 'ArrowLeft') {\n      dispatch(viewNextPhoto(-1))\n      return\n    }\n  })\n\n  const activePhoto = useSelector(getActivePhoto)\n\n  return (\n    <Component>\n      <ModalOverlay />\n      <ModalContent photo={activePhoto} />\n    </Component>\n  )\n}\n\nexport default Modal\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport useSelector from 'hooks/useSelector'\nimport PhotosList from 'components/photosList/PhotosList'\nimport Modal from 'components/modal/Modal'\nimport { setActivePhoto } from 'modules/global'\nimport { getPhoto } from 'selectors'\n\nconst HomePage: React.FC = () => {\n  const dispatch = useDispatch()\n\n  const { photoId } = useParams()\n  const photo = useSelector(state => getPhoto(photoId, state))\n\n  useEffect(() => {\n    if (photoId && photo) {\n      dispatch(setActivePhoto(photo))\n    }\n  }, [ photoId ])\n\n  return (\n    <div>\n      <PhotosList />\n      {photoId &&\n        <Modal />\n      }\n    </div>\n  )\n}\n\nexport default HomePage\n","import React from 'react'\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport useSelector from 'hooks/useSelector'\nimport HomePage from 'pages/home/HomePage'\nimport { getIsInitialized } from 'selectors'\n\nconst InnerApp: React.FC = () => {\n  const isInitialized = useSelector(getIsInitialized)\n\n  if (!isInitialized) {\n    return null\n  }\n\n  return (\n    <Router>\n      <Switch>\n        <Route\n          path='/:photoId?'\n          component={HomePage}\n        />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default InnerApp\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { initApplication } from 'modules/global'\nimport InnerApp from 'app/InnerApp'\n\nconst ConnectedApp: React.FC = () => {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(initApplication())\n  }, [ dispatch ])\n\n  return (\n    <InnerApp />\n  )\n}\n\nexport default ConnectedApp\n","import React, { useEffect, useState } from 'react'\nimport { Provider } from 'react-redux'\nimport createStore from './createStore'\nimport ConnectedApp from './ConnectedApp'\n\nconst App: React.FC = () => {\n  const [ store, setStore ] = useState<any>(null)\n\n  useEffect(() => {\n    setStore(createStore())\n  }, [])\n\n  if (!store) {\n    return null\n  }\n\n  return (\n    <Provider store={store}>\n      <ConnectedApp />\n    </Provider>\n  )\n}\n\nexport default App\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { routerMiddleware } from 'connected-react-router'\n\nimport createRootReducer from 'modules'\nimport history from 'ownHistory'\n\nexport default () => {\n  return createStore(\n    createRootReducer(),\n    applyMiddleware(\n      thunkMiddleware,\n      routerMiddleware(history)\n    )\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        }).catch(console.error)\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          }).catch(console.error)\n        }).catch(console.error)\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister().catch(console.error)\n    }).catch(console.error)\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}